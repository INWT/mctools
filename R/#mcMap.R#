mcMap <- function(x, f, ..., utils = mcMapUtils()) {
  # errors (character) "suppress" (as in mclappy), "stop" (after all nodes
  #   are done, raise an error)
  # warnings (character) "suppress" (as in mclapply), "stop" (after all is
  #   done), "return" (returns tuples [val[ANY|error], warnings])
  param <- getOption("warn")
  on.exit(options(warn = param))
  options(warn = 0)
  res <- mclapply(x, utils$wrap(f), ...)
  res <- utils$handleErrors(res)
  res <- utils$handleWarnings(res)
  res
}

mcMapUtils <- function(errors = "suppress", warnings = "suppress", verbose = TRUE) {

  stopifnot(errors %in% c("suppress", "stop"))
  stopifnot(warnings %in% c("suppress", "stop", "return"))

  modules::module({

    modules::export("wrap", "handleWarnings", "handleErrors")

    wrap <- function(fun) {

      function(...) {

        warnings <- list()

        warnHandler <- function(w) {
          if (verbose) futile.logger::flog.warn(w$message)
          warnings[[length(warnings) + 1]] <<- w
          invokeRestart("muffleWarning")
        }

        errorHandler <- function(e) {
          if (verbose) futile.logger::flog.error(e$message)
          e
        }

        res <- withCallingHandlers(
          tryCatch(fun(...), error = errorHandler),
          warning = warnHandler
        )

        list(res = res, warnings = warnings)

      }

    }

    handleErrors <- function(res) {
      if (errors == "stop" && any(isError(res))) stop(sprintf(
        "#overall/#errors: %s/%s", length(res), sum(isError(res))))
      else res
    }

    isError <- function(x) {
      errorTypes <- c("try-error", "simpleError", "error")
      vapply(
        lapply(x, `[[`, "res"),
        function(x) any(class(x) %in% errorTypes), logical(1)
      )
    }

    handleWarnings <- function(res) {
      if (warnings == "suppress") lapply(res, function(x) x$res)
      else if (warnings == "return") res
      else if (warnings == "stop" && any(hasWarning(res))) stop(sprintf(
        "#overall/#warnings: %s/%s", length(res), sum(hasWarning(res))))
      else stop("can't handle warning option: ", warnings)
    }

    hasWarning <- function(res) {
      vapply(res, function(x) length(x$warnings) > 0, logical(1))
    }

  })

}




