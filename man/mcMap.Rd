% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mcMap.R
\name{mcMap}
\alias{mcMap}
\title{mclapply with error and warning handlers}
\usage{
mcMap(x, f, ..., errors = getErrorsOption(), warnings = getWarningsOption(),
  warningsWhitelist = getWarningsWhitelist(), verbose = TRUE)
}
\arguments{
\item{x}{(vector) a vector to iterate over}

\item{f}{(function)}

\item{...}{arguments passed to \code{\link[parallel]{mclapply}}}

\item{errors}{(character) one in \code{c("suppress", "stop")}}

\item{warnings}{(character) one in \code{c("suppress", "stop", "return")}}

\item{warningsWhitelist}{(character) a vector of regular expressions for white-listing
warnings}

\item{verbose}{(logical) if we want to log warnings and errors}
}
\description{
This is a wrapper around \code{parallel::mclapply}. It supports different
options for handling errors and warnings on nodes.
}
\details{
The arguments \code{errors} and \code{warnings} control how errors and
  warnings are dealt with. 'suppress' will prevent R from throwing a message
  using \link{stop} or \link{warning}. However logging is controlled with
  \code{verbose}. 'stop' will throw an error after all nodes have completed -
  this is what we want in most production systems. 'return' is valid for
  warnings since for errors we always return the error object; just like
  mclapply. The option 'return' will add a attribute 'warnings' to the
  returned list.

The default values are chosen, so this is a drop in replacement for mclapply.
}
\examples{
# vignette("Introduction", package = "mctools")
mcMap(1:2, function(x) if (x == 2) stop("Don't like '2'!") else x)

}
