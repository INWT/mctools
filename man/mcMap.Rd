% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mcMap.R
\name{mcMap}
\alias{mcMap}
\title{mclapply with error and warning handlers}
\usage{
mcMap(x, f, ..., errors = getErrorsOption(),
  warnings = getWarningsOption(),
  warningsWhitelist = getWarningsWhitelist(), finallyStop = FALSE)
}
\arguments{
\item{x}{(vector) a vector to iterate over}

\item{f}{(function)}

\item{...}{arguments passed to \code{\link[parallel]{mclapply}}}

\item{errors}{(character) one in \code{c("suppress", "log")}}

\item{warnings}{(character) one in \code{c("suppress", "log", "asError")}}

\item{warningsWhitelist}{(character) a vector of regular expressions for white-listing
warnings.}

\item{finallyStop}{(logical) if we want to raise an error if any of the nodes
produced one.}
}
\value{
Unlike \code{mclapply} not an object of class 'try-error' is
  returned, but a \link{simpleError} in case of errors. This is also the case
  when warnings are errors.
}
\description{
This is a wrapper around \code{parallel::mclapply}. It supports different
options for handling errors and warnings on nodes.
}
\details{
This implementation has the same limitations as \code{mclapply}: GUIs (like
  RStudio) do not handle console output well. As the documentation of
  \code{mclapply} already states: this function is not designed for
  interactive sessions.

The arguments \code{errors} and \code{warnings} control how errors and
  warnings are dealt with. When \code{warnings = "asError"} is specified,
  warnings are escalated into errors unless they are on the whitelist, which,
  by default, is empty.
}
\examples{
mcMap(1:2, function(x) if (x == 2) stop("Don't like '2'!") else x)

}
